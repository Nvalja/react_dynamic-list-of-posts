{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","posts","getPost","useState","postIsSelect","setPostIsSelect","buttonId","setButtonId","className","map","post","key","id","userId","title","type","classnames","PostsList__button","button","onClick","postID","NewCommentForm","addComment","inputName","setInputName","inputMail","setInputMail","inputComment","setInputComment","submit","setSubmit","onSubmit","event","preventDefault","trim","name","email","body","value","placeholder","NewCommentForm__input","onChange","target","request","url","option","a","fetch","response","ok","Error","status","statusText","json","console","log","getAllPosts","result","data","getComments","postComments","comment","method","headers","JSON","stringify","removeComments","commentId","PostDetails","setPost","comments","setComments","hidedComments","setHidedComments","useEffect","loadPost","loadCommets","loadedPost","api","loadedComments","filter","postId","length","then","newComment","App","setPosts","userID","setUserID","setPostID","postsFromApi","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a65d98d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\nimport classnames from 'classnames';\n\nexport const PostsList = ({ posts, getPost }) => {\n  const [postIsSelect, setPostIsSelect] = useState(false);\n  const [buttonId, setButtonId] = useState(0);\n\n  const onPostButton = (postID) => {\n    if (postID === buttonId) {\n      setPostIsSelect(!postIsSelect);\n    } else {\n      setPostIsSelect(true);\n    }\n\n    getPost(postID);\n    setButtonId(postID);\n  };\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li className=\"PostsList__item\" key={post.id}>\n            <div>\n              <b>\n                [User\n                {' '}\n                {post.userId}\n                ]:\n                {' '}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className={classnames({\n                PostsList__button: true,\n                button: true,\n                'PostsList__user-button': postIsSelect\n                && buttonId === post.id,\n              })}\n              onClick={() => {\n                onPostButton(post.id);\n              }}\n            >\n              {postIsSelect\n              && buttonId === post.id\n                ? 'Close'\n                : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequaired,\n    title: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  getPost: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\nimport classnames from 'classnames';\n\nexport const NewCommentForm = ({ addComment }) => {\n  const [inputName, setInputName] = useState('');\n  const [inputMail, setInputMail] = useState('');\n  const [inputComment, setInputComment] = useState('');\n  const [submit, setSubmit] = useState(false);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setSubmit(true);\n\n    if (\n      inputName.trim()\n      && inputMail.trim()\n      && inputComment.trim()\n    ) {\n      addComment({\n        name: inputName,\n        email: inputMail,\n        body: inputComment,\n      });\n\n      setInputName('');\n      setInputMail('');\n      setInputComment('');\n      setSubmit(false);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={inputName}\n          placeholder=\"Your name\"\n          className={classnames({\n            NewCommentForm__input: true,\n            'NewCommentForm__input-error': !inputName && submit,\n          })}\n          onChange={(event) => {\n            setInputName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={inputMail}\n          placeholder=\"Your email\"\n          className={classnames({\n            NewCommentForm__input: true,\n            'NewCommentForm__input-error': !inputMail && submit,\n          })}\n          onChange={(event) => {\n            setInputMail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className={classnames({\n            NewCommentForm__input: true,\n            'NewCommentForm__input-error': !inputComment && submit,\n          })}\n          value={inputComment}\n          onChange={(event) => {\n            setInputComment(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className={classnames({\n          'NewCommentForm__submit-button': true,\n          button: true,\n          'NewCommentForm__submit-button-active': inputComment,\n        })}\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n};\n","/* eslint-disable consistent-return */\nconst BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = async(url, option) => {\n  try {\n    const response = await fetch(`${BASE_URL}${url}`, option);\n\n    if (!response.ok) {\n      throw new Error(`${response.status}---${response.statusText}`);\n    }\n\n    return response.json();\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.log(error);\n  }\n};\n","import { request } from './api';\n\nexport const getAllPosts = async() => {\n  const result = await request('/posts');\n\n  return result.data;\n};\n\nexport const getPost = async(postID) => {\n  const result = await request(`/posts/${postID}`);\n\n  return result.data;\n};\n","import { request } from './api';\n\nexport const getComments = async() => {\n  const result = await request('/comments');\n\n  return result.data;\n};\n\nexport const postComments = async(comment) => {\n  const result = await request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n\n  return result.data;\n};\n\nexport const removeComments = async(commentId) => {\n  const result = await request(`/comments/${commentId}`, { method: 'DELETE' });\n\n  return result.data;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPost } from '../../api/posts';\n\n// eslint-disable-next-line import/extensions\nimport * as api from '../../api/comments.js';\n\nexport const PostDetails = ({ postID }) => {\n  const [post, setPost] = useState({});\n  const [comments, setComments] = useState([]);\n  const [hidedComments, setHidedComments] = useState(false);\n\n  useEffect(() => {\n    if (postID) {\n      loadPost();\n      loadCommets();\n    }\n  }, [postID]);\n\n  const loadPost = async() => {\n    const loadedPost = await getPost(postID);\n\n    setPost(loadedPost);\n  };\n\n  const loadCommets = async() => {\n    const loadedComments = await api.getComments();\n\n    setComments(loadedComments.filter(comment => comment.postId === postID));\n  };\n\n  const addComment = (newComment) => {\n    api.postComments({\n      ...newComment,\n      postId: postID,\n    }).then(() => loadCommets());\n  };\n\n  const deleteComment = (commentId) => {\n    api.removeComments(commentId).then(() => loadCommets());\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>PostDetails</h2>\n      <h3>\n        User\n        {' '}\n        {post.userId}\n      </h3>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className={classnames({\n            button: true,\n            'PostDetails__button-active': hidedComments,\n          })}\n          onClick={() => {\n            setHidedComments(!hidedComments);\n          }}\n        >\n          Hide\n          {' '}\n          {comments.length}\n          {' '}\n          comments\n        </button>\n\n        <ul className=\"PostDetails__list\">\n          {!hidedComments && (\n            comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    deleteComment(comment.id);\n                  }}\n                >\n                  X\n                </button>\n                <p>\n                  {comment.body}\n                  <span className=\"PostDetails__name\">{comment.name}</span>\n                </p>\n              </li>\n            ))\n          )}\n        </ul>\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addComment={addComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postID: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport * as api from './api/posts';\n\nexport const App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userID, setUserID] = useState(0);\n  const [postID, setPostID] = useState(null);\n\n  useEffect(() => {\n    if (!userID) {\n      api.getAllPosts().then(setPosts);\n    } else {\n      api.getAllPosts()\n        .then(postsFromApi => postsFromApi\n          .filter(post => post.userId === userID))\n\n        .then(setPosts);\n    }\n  }, [userID]);\n\n  const handleUser = (event) => {\n    setUserID(+event.target.value);\n    setPostID(null);\n  };\n\n  const handlePost = (id) => {\n    if (id === postID) {\n      setPostID(null);\n\n      return;\n    }\n\n    setPostID(id);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={handleUser}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            getPost={handlePost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          { postID && <PostDetails postID={postID} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}